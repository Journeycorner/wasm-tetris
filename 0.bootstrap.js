(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "../pkg/wasm_tetris.js":
/*!*****************************!*\
  !*** ../pkg/wasm_tetris.js ***!
  \*****************************/
/*! exports provided: __wbg_error_4bb6c2a97407129a, __wbg_new_59cb74e423758ede, __wbg_stack_558ba5917b466edd, __wbg_random_a3632ce29e3f2eec, __wbindgen_throw, Block, Game, Point, __wbindgen_object_drop_ref */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_error_4bb6c2a97407129a\", function() { return __wbg_error_4bb6c2a97407129a; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_new_59cb74e423758ede\", function() { return __wbg_new_59cb74e423758ede; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_stack_558ba5917b466edd\", function() { return __wbg_stack_558ba5917b466edd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_random_a3632ce29e3f2eec\", function() { return __wbg_random_a3632ce29e3f2eec; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Block\", function() { return Block; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Game\", function() { return Game; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Point\", function() { return Point; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_object_drop_ref\", function() { return __wbindgen_object_drop_ref; });\n/* harmony import */ var _wasm_tetris_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wasm_tetris_bg */ \"../pkg/wasm_tetris_bg.wasm\");\n\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== _wasm_tetris_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory = new Uint8Array(_wasm_tetris_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nfunction __wbg_error_4bb6c2a97407129a(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n\n    varg0 = varg0.slice();\n    _wasm_tetris_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](arg0, arg1 * 1);\n\n    console.error(varg0);\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction __wbg_new_59cb74e423758ede() {\n    return addHeapObject(new Error());\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet passStringToWasm;\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = _wasm_tetris_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            arg = arg.slice(offset);\n            ptr = _wasm_tetris_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_realloc\"](ptr, size, size = offset + arg.length * 3);\n            const view = getUint8Memory().subarray(ptr + offset, ptr + size);\n            const ret = cachedTextEncoder.encodeInto(arg, view);\n\n            offset += ret.written;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n} else {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = _wasm_tetris_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            const buf = cachedTextEncoder.encode(arg.slice(offset));\n            ptr = _wasm_tetris_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_realloc\"](ptr, size, size = offset + buf.length);\n            getUint8Memory().set(buf, ptr + offset);\n            offset += buf.length;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== _wasm_tetris_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint32Memory = new Uint32Array(_wasm_tetris_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nfunction __wbg_stack_558ba5917b466edd(ret, arg0) {\n\n    const retptr = passStringToWasm(getObject(arg0).stack);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n}\n\nfunction __wbg_random_a3632ce29e3f2eec() {\n    return Math.random();\n}\n\nfunction __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\nfunction freeBlock(ptr) {\n\n    _wasm_tetris_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_block_free\"](ptr);\n}\n/**\n*/\nclass Block {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeBlock(ptr);\n    }\n\n}\n\nfunction freeGame(ptr) {\n\n    _wasm_tetris_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_game_free\"](ptr);\n}\n/**\n*/\nclass Game {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Game.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeGame(ptr);\n    }\n\n    /**\n    * @returns {Game}\n    */\n    static new() {\n        return Game.__wrap(_wasm_tetris_bg__WEBPACK_IMPORTED_MODULE_0__[\"game_new\"]());\n    }\n    /**\n    * @returns {number}\n    */\n    draw() {\n        return _wasm_tetris_bg__WEBPACK_IMPORTED_MODULE_0__[\"game_draw\"](this.ptr);\n    }\n    /**\n    * @param {number} input_code\n    * @returns {void}\n    */\n    input(input_code) {\n        return _wasm_tetris_bg__WEBPACK_IMPORTED_MODULE_0__[\"game_input\"](this.ptr, input_code);\n    }\n    /**\n    * @returns {boolean}\n    */\n    tick() {\n        return (_wasm_tetris_bg__WEBPACK_IMPORTED_MODULE_0__[\"game_tick\"](this.ptr)) !== 0;\n    }\n}\n\nfunction freePoint(ptr) {\n\n    _wasm_tetris_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_point_free\"](ptr);\n}\n/**\n*/\nclass Point {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freePoint(ptr);\n    }\n\n}\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction __wbindgen_object_drop_ref(i) { dropObject(i); }\n\n\n\n//# sourceURL=webpack:///../pkg/wasm_tetris.js?");

/***/ }),

/***/ "../pkg/wasm_tetris_bg.wasm":
/*!**********************************!*\
  !*** ../pkg/wasm_tetris_bg.wasm ***!
  \**********************************/
/*! exports provided: memory, __wbg_point_free, __wbg_game_free, __wbg_block_free, game_new, game_draw, game_input, game_tick, __wbindgen_malloc, __wbindgen_realloc, __wbindgen_free */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./wasm_tetris */ \"../pkg/wasm_tetris.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/wasm_tetris_bg.wasm?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var wasm_tetris__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! wasm-tetris */ \"../pkg/wasm_tetris.js\");\n/* harmony import */ var wasm_tetris_wasm_tetris_bg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wasm-tetris/wasm_tetris_bg */ \"../pkg/wasm_tetris_bg.wasm\");\n\n\n\nlet game = wasm_tetris__WEBPACK_IMPORTED_MODULE_0__[\"Game\"].new();\nconst CELL_SIZE = 20;\nconst canvas = document.getElementById('tetris-canvas');\ncanvas.width = 10 * (CELL_SIZE + 2) + 2;\ncanvas.height = 40 * (CELL_SIZE + 2 ) + 2;\n\nconst ctx = canvas.getContext('2d');\n\nconst colors = {\n    0 : '#000000',\n    1 : '#780737',\n    2 : '#d29708',\n    3 : '#125f03',\n    4 : '#e9e2c7',\n    5 : '#9b6928',\n    6 : '#1c7180',\n    7 : '#569f1b',\n}\n\ndocument.addEventListener('keypress', (e) => {\n    switch (e.code) {\n        case 'KeyA':\n            console.log('Left');\n            game.input(8);\n            draw();\n            break;\n        case 'KeyD':\n            game.input(16);\n            console.log('Right');\n            draw();\n            break;\n        case 'KeyW':\n            game.input(2);\n            console.log('Up');\n            draw();\n            break;\n        case 'KeyS':\n            game.input(4);\n            console.log('Down');\n            draw();\n            break;\n        default:\n            break;\n    }\n});\n\nfunction draw() {\n    const screenPtr = game.draw();\n    const screen = new Uint8Array(wasm_tetris_wasm_tetris_bg__WEBPACK_IMPORTED_MODULE_1__[\"memory\"].buffer, screenPtr, 10 * 40);\n\n    ctx.beginPath();\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    for (let col = 0; col < 10; col++) {\n        for (let row = 0; row < 40; row++) {\n            const idx = col * 40 + row;\n\n            ctx.fillStyle = colors[screen[idx]] || '#0000000';\n            ctx.fillRect(\n                col * (CELL_SIZE + 2) + 2,\n                row * (CELL_SIZE + 2) + 2,\n                CELL_SIZE,\n                CELL_SIZE\n            );\n        }\n    }\n\n    ctx.stroke();\n}\n\nconst tick_delay = 400;\nlet last_tick = null;\n\nfunction tick(timestamp) {\n    if (!last_tick) {\n        last_tick = timestamp;\n    }\n\n    let progress = timestamp - last_tick;\n    if (progress > tick_delay) {\n        last_tick = timestamp;\n        if (game.tick()) {\n            game = wasm_tetris__WEBPACK_IMPORTED_MODULE_0__[\"Game\"].new();\n        }\n    }\n\n    draw();\n    requestAnimationFrame(tick);\n}\n\nrequestAnimationFrame(tick);\n\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);